#version 450
#include "particles.glsl"
#include "staticrandom.glsl"
#define PI 3.14159265359

layout(local_size_x = 32, local_size_y = 1) in;

layout(set = 0, binding = 0, rgba32f) uniform imageBuffer StorageTexelBuffer; // SSBO

layout(set = 0, binding = 1) uniform UBO
{
    ParticleEmitter emitter;
    ParticleAffector affector;
    uint particleCount;
    float time;
    float deltaTime;
} ubo;

layout(set = 0, binding = 2) buffer Storage
{
    coherent uint emitted;
};

float getRandomValue(float low, float high, float specialData)
{
    // 0...1
    float randomValue = random(vec3(gl_GlobalInvocationID.x, ubo.deltaTime, specialData));

    return low + (high - low) * randomValue;
}

float getRandomValue(float low, float high)
{
    return getRandomValue(low, high, 0.0);
}

void storeParticle(vec4 positionLife, vec4 color, vec4 speedSize, vec4 data, vec4 startData)
{
    imageStore(StorageTexelBuffer, int(gl_GlobalInvocationID.x * 5 + 0), positionLife);
    imageStore(StorageTexelBuffer, int(gl_GlobalInvocationID.x * 5 + 1), color);
    imageStore(StorageTexelBuffer, int(gl_GlobalInvocationID.x * 5 + 2), speedSize);
    imageStore(StorageTexelBuffer, int(gl_GlobalInvocationID.x * 5 + 3), data);
    imageStore(StorageTexelBuffer, int(gl_GlobalInvocationID.x * 5 + 4), startData);
}

void recreateParticle()
{
    float life = getRandomValue(ubo.emitter.minLife, ubo.emitter.maxLife, 0);

    float xPos = getRandomValue(-ubo.emitter.originRadius, ubo.emitter.originRadius, 1);
    float yPos = getRandomValue(-ubo.emitter.originRadius, ubo.emitter.originRadius, 2);
    vec3 position = vec3(xPos, 0, yPos);

    vec4 color = vec4(getRandomValue(ubo.emitter.colorRangeStart.r, ubo.emitter.colorRangeEnd.r, 3),
                      getRandomValue(ubo.emitter.colorRangeStart.g, ubo.emitter.colorRangeEnd.g, 4),
                      getRandomValue(ubo.emitter.colorRangeStart.b, ubo.emitter.colorRangeEnd.b, 5),
                      getRandomValue(ubo.emitter.colorRangeStart.a, ubo.emitter.colorRangeEnd.a, 6));

    float speedValue = getRandomValue(ubo.emitter.minSpeed, ubo.emitter.maxSpeed, 7);
    //float r = 1.0;
    float theta = getRandomValue(0, ubo.emitter.angle, 8);
    float phi = getRandomValue(0, 2*PI, 9);
    vec3 speedNormal = vec3(sin(theta) * cos(phi),
                            sin(theta) * sin(phi),
                            cos(theta));
    vec3 speed = vec3(ubo.emitter.toDirection * vec4(speedNormal * speedValue, 1.0));

    float size = getRandomValue(ubo.emitter.minSize, ubo.emitter.maxSize, 9);
    float rotation = getRandomValue(ubo.emitter.minRotate, ubo.emitter.maxRotate, 10);

    float acceleration = getRandomValue(ubo.affector.minAcceleration, ubo.affector.maxAcceleration, 11);
    float rotationSpeed = getRandomValue(ubo.affector.minRotateSpeed, ubo.affector.maxRotateSpeed, 12);
    float scaleSpeed = getRandomValue(ubo.affector.minScaleSpeed, ubo.affector.maxScaleSpeed, 13);

    storeParticle(vec4(position, life),
                  color,
                  vec4(speed, size),
                  vec4(acceleration, rotation, rotationSpeed, scaleSpeed),
                  vec4(life, size, speedValue, rotation));
}

void main()
{
    emitted = 0;
    memoryBarrierBuffer();
    barrier();

    if( gl_GlobalInvocationID.x < ubo.particleCount )
    {
        // TODO: Pass this value as uniform
        float partOfSecond = ubo.time - uint(ubo.time);
        uint alreadyEmitted = uint(partOfSecond * ubo.emitter.emissionRate);
        uint needToEmitByTime = uint((partOfSecond + ubo.deltaTime) * ubo.emitter.emissionRate);
        uint needToEmit = needToEmitByTime - alreadyEmitted;

        vec4 position = imageLoad( StorageTexelBuffer, int(gl_GlobalInvocationID.x * 5 + 0) );
        float life = position.w;

        if (life <= 0 && emitted < needToEmit)
        {
            if (atomicAdd(emitted, 1) <= needToEmit)
            {
                recreateParticle();
            }
        } else {
            // update particle

            vec4 color = imageLoad( StorageTexelBuffer, int(gl_GlobalInvocationID.x * 5 + 1) );

            vec4 speed = imageLoad( StorageTexelBuffer, int(gl_GlobalInvocationID.x * 5 + 2) );
            float size = speed.w;

            vec4 params = imageLoad( StorageTexelBuffer, int(gl_GlobalInvocationID.x * 5 + 3) );
            float acceleration = params.x;
            float rotation = params.y;
            float rotationSpeed = params.z;
            float scaleSpeed = params.w;

            vec4 startParams = imageLoad( StorageTexelBuffer, int(gl_GlobalInvocationID.x * 5 + 4) );

            position.xyz += speed.xyz * ubo.deltaTime;
            vec3 accelerationVector = normalize(speed.xyz) * acceleration;
            speed.xyz += accelerationVector.xyz * ubo.deltaTime;
            rotation += rotationSpeed * ubo.deltaTime;
            size += scaleSpeed * ubo.deltaTime;
            color += ubo.affector.colorChanger * ubo.deltaTime;
            life -= ubo.deltaTime;

            storeParticle(vec4(position.xyz, life),
                          color,
                          vec4(speed.xyz, size),
                          vec4(acceleration, rotation, rotationSpeed, scaleSpeed),
                          startParams);
        }
    }
}